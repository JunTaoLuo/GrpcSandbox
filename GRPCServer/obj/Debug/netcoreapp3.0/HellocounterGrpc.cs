// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hellocounter.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace HelloCounter {
  /// <summary>
  /// The counter service definition.
  /// </summary>
  public static partial class Counter
  {
    static readonly string __ServiceName = "HelloCounter.Counter";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HelloCounter.CounterReply> __Marshaller_HelloCounter_CounterReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HelloCounter.CounterReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HelloCounter.CounterRequest> __Marshaller_HelloCounter_CounterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HelloCounter.CounterRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HelloCounter.CounterReply> __Method_IncrementCount = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HelloCounter.CounterReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncrementCount",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_HelloCounter_CounterReply);

    static readonly grpc::Method<global::HelloCounter.CounterRequest, global::HelloCounter.CounterReply> __Method_AccumulateCount = new grpc::Method<global::HelloCounter.CounterRequest, global::HelloCounter.CounterReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AccumulateCount",
        __Marshaller_HelloCounter_CounterRequest,
        __Marshaller_HelloCounter_CounterReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HelloCounter.HellocounterReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Counter</summary>
    public abstract partial class CounterBase
    {
      /// <summary>
      /// Get current count
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::HelloCounter.CounterReply> IncrementCount(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Increment count through multiple counts
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::HelloCounter.CounterReply> AccumulateCount(grpc::IAsyncStreamReader<global::HelloCounter.CounterRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CounterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_IncrementCount, serviceImpl.IncrementCount)
          .AddMethod(__Method_AccumulateCount, serviceImpl.AccumulateCount).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(this grpc::ServiceBinderBase serviceBinder, CounterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_IncrementCount, serviceImpl.IncrementCount);
      serviceBinder.AddMethod(__Method_AccumulateCount, serviceImpl.AccumulateCount);
    }

  }
}
#endregion
