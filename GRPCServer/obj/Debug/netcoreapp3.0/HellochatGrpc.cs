// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hellochat.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace HelloChat {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Chatter
  {
    static readonly string __ServiceName = "HelloChat.Chatter";

    static readonly grpc::Marshaller<global::HelloChat.ChatMessage> __Marshaller_HelloChat_ChatMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HelloChat.ChatMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::HelloChat.ChatMessage, global::HelloChat.ChatMessage> __Method_Chat = new grpc::Method<global::HelloChat.ChatMessage, global::HelloChat.ChatMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Chat",
        __Marshaller_HelloChat_ChatMessage,
        __Marshaller_HelloChat_ChatMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HelloChat.HellochatReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Chatter</summary>
    public abstract partial class ChatterBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Chat(grpc::IAsyncStreamReader<global::HelloChat.ChatMessage> requestStream, grpc::IServerStreamWriter<global::HelloChat.ChatMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Chat, serviceImpl.Chat).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(this grpc::ServiceBinderBase serviceBinder, ChatterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Chat, serviceImpl.Chat);
    }

  }
}
#endregion
